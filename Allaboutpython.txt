1. Introduction to Python
	*What is Python? History & Features

	*Installing Python (Windows/Linux/Mac)

	*Running Python scripts (IDLE, Terminal, VS Code, Jupyter)

	*Python syntax and indentation

	*print() function and basic input/output

2. Variables and Data Types
	*Variable assignment

	 	x    = 10 	 -->int
	 	name = "Yogesh"  -->string
	 	y    = 10.7	 -->float
	 	start= True	 -->boolean
	 	

	*Basic data types: int, float, str, bool
	
		int	 x    = 10 	  Only for numbers
	 	string   name = "Yogesh"  Only for characters
	 	float    y    = 10.7	  Only for pointing values
	 	boolean  start= True	  Only for boolean valuse like (True/False)

	*Type conversion (str(), int(), etc.)
	
		x = 5
		y = float(x) #Convert int to float -->5.0
		
		x = 5.9
		y = str(x)   #Convert float to int -->"5.9"
		
		x = "123"
		y = int(x)   #Convert string to int -->123
		
		x = bool(1)  #Convert 1 to True

	*The type() function
	
		x = 1
		print(type(x)) --> <class 'int'>

	*Comments in Python
	
		x = 5 #This is an inline comment
		
		#This is single line comment
		
		"""
		This is an multiline comment
		"""
	

3. Operators
	*Arithmetic operators (+, -, *, /, //, %, **)
	
		a = 10
		b = 20
		c = a + b
		print(c)	-->30
		

	*Comparison operators (==, !=, >, <, >=, <=)
		
		a = 10
		b = 20
		print(a == b)	--> True

	*Logical operators (and, or, not)
	
		a = 10
		b = 20
		c = 20
		a == b and b == c

	*Assignment operators (=, +=, etc.)

		a = 10
		b = 20
		print(a = b)

	*Bitwise operators (&, ', ^, ~, <<, >>)


4. Strings
	*Creating and using strings
	
		Name = "Yogesh"
		print(Name)
	
	*String methods (lower(), upper(), replace(), find())
	
		"Yogesh".upper() --> "YOGESH"
		
	*String formatting (f"{}", .format(), %)
	  	1)f"{}"
	  	
		name = "Yogesh"
		age  = 23
		print(f"My name is {name} and my age is {age}")

		2).format()
		
		name = "Yogesh"
		age  = 23
		print("My name is {} and my age is {}".format(name, age))
		
		3)%
		("%d --> int", "%f --> float", "%s --> str")
		
		name = "Yogesh"
		age  = 23
		print("My name is %s and my age is %d" % (name, age))
		
	*String slicing and indexing
	
		*indexing
		name = "Yogesh"
		print(name[0])
		
		*Slicing

	*Multiline strings
	
		Paragrapth = '''
		
				'''

5. Conditional Statements
	*if, elif, else blocks
	
		a = 10
		b = 20
		c = 10
		if a < b:
		   print("a is greter than b")
		   
		elif a == c:
		   print("a is equal to c")
		   
		else:
		   print("Wrong!")

	*Nested conditions

		a = 10
		b = 20
		c = 10
		if a < b:
	   	   print("a is greter than b")
	   		
	   		if a == c:
	   		   print("a is equal to c" )
	   		   
	   		else:
	   		   print("Wrong!)
	   		   
	   	else:	
	   	   print("Wrong!)
	   		

	*Truthy and Falsy values

6. Loops
	*for loops

		a = 10 
		for i in range(a):
			print(i)

	*while loops

		count = 1
		while count <= 5:
			print(f"count is {count}")
			count += 1

	*break, continue, pass
	
		1)break
		
		for i in range(1,6):
		    if i == 3:
		       break #if found 3 no loop stop. Output - 1, 2
		    print(i)
		    
		2)continue
		
		for i in range(1,6):
		    if i == 3:
		       continue #Skip value no 3 and print another value. Output - 1, 2, 4, 5
		    print(i)
	
		3)pass
		
		No effect continue as normal.
	
	*Looping through strings, lists, and ranges

		list = ["orange", 5, "mango", "bannana", 1.5]
		
		for i in list:
		    print(i) 

7. Data Structures
	*Lists: Creation, indexing, methods (append, pop, sort)

		*Used to store collection of items.
		*Mutable(can change value)
		*Allows duplicate values
		*[]

	*Tuples: Immutability, unpacking

		*same like lists but cannot be changed aftr creation.
		*Faster and safe for fixed data.
		*()

	*Dictionaries: Key-value pairs, methods (get, keys, values)
		
		*Stores data as key-value pairs.
		*very fast lookup by key.
		*Keys must be unique.
		*{}

	*Sets: Uniqueness, operations (union, intersection)

		*No duplicates value.
		*Unordered collection.
		*{}

#Advanced
8. Functions
	*Defining and calling functions

		def car():
		    print("Welcome to car world")
		    
		car()

	*Parameters and return values

		def car(name):
		    return name

		c = car("Audi")
		print(c)

	*Default and keyword arguments

		

	*Variable scope (global, local)

		def school():
		    name = "Yogesh" #local variable.
		    print(name)
		    
		school()

		name = "Yogesh"  #global variable.
		def school():
		    print(name)
		    
		school()

	

		

